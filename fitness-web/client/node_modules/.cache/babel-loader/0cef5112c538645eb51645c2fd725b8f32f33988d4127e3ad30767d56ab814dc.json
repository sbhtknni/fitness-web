{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Daniel Maman\\\\git\\\\fitness-web\\\\fitness-web\\\\client\\\\src\\\\pages\\\\TrainingPrograms.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport MainLayout from '../layout/MainLayout.jsx';\nimport { getTrainingProgramas, getTrainingProgramasName } from \"../controller/requests.js\";\nimport ErrorPage from \"./ErrorPage.jsx\";\nimport TPMainComponent from \"../componenets/TrainingProgramsComp/TPMainComponent.jsx\";\nimport Footer from '..//componenets//Footer.jsx';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TrainingProgramas = () => {\n  _s();\n  const [muscle, setMuscle] = useState(\"\");\n  const [error, setError] = useState(false);\n  const [data, setData] = useState([]);\n  const [musclesNames, setMusclesNames] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [flag, setFlag] = useState(false);\n  const [dataVals, setDataVals] = useState({\n    link: [],\n    topic: [],\n    information: [],\n    generalInformation: \"\"\n  });\n\n  // get all muscles names from DB on first render\n  useEffect(() => {\n    const getDataMusclesNamesFromDB = async () => {\n      await getMusclesNames();\n    };\n    getDataMusclesNamesFromDB();\n  }, []);\n\n  // get all muscles information from DB\n  useEffect(() => {\n    const getData = async () => {\n      await fetchmuscleInformation();\n      setLoading(false); // Set loading to false once data is fetched\n    };\n\n    getData();\n  }, [muscle]);\n\n  // get all muscles names from DB and set it to musclesNames\n  const getMusclesNames = async () => {\n    const response = await getTrainingProgramasName();\n    if (response === []) {\n      setError(true);\n      return;\n    }\n    setMusclesNames(response);\n  };\n\n  // get all muscles information from DB and set it to data\n  const fetchmuscleInformation = async () => {\n    const response = await getTrainingProgramas(muscle);\n    if (response === []) {\n      setError(true);\n      return;\n    }\n    setData(response);\n    setAllData(response);\n  };\n\n  // set all data to dataVals\n  const setAllData = async data => {\n    if (flag === true) {\n      const updatedData = {\n        ...dataVals,\n        link: data.musclesInformation.topics.map(info => info.link),\n        topic: data.musclesInformation.topics.map(info => info.topic),\n        information: data.musclesInformation.topics.map(info => info.information),\n        generalInformation: data.musclesInformation.generalInformation\n      };\n      setDataVals(updatedData);\n    }\n  };\n  // handle muscle change ant flag to true to update dataVals with new data\n  const handleMuscleChange = option => {\n    const selectedMuscle = musclesNames.find(muscle => muscle === option);\n    setMuscle(selectedMuscle);\n    setFlag(true);\n  };\n\n  // if error return error page\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(ErrorPage, {\n      toRemove: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 16\n    }, this);\n  }\n  // if loading the data return loading page\n  if (loading) {\n    console.log(\"Loading\");\n    return /*#__PURE__*/_jsxDEV(ErrorPage, {\n      toRemove: false\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 16\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(MainLayout, {\n      children: [/*#__PURE__*/_jsxDEV(TPMainComponent, {\n        musclesNames: musclesNames,\n        muscle: muscle,\n        handleMuscleChange: handleMuscleChange,\n        dataVals: dataVals\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }, this);\n  }\n  ;\n};\n_s(TrainingProgramas, \"FvBVNJ2TGyb7HTIkknaMbv/0Dm4=\");\n_c = TrainingProgramas;\nexport default TrainingProgramas;\nvar _c;\n$RefreshReg$(_c, \"TrainingProgramas\");","map":{"version":3,"names":["React","useState","useEffect","MainLayout","getTrainingProgramas","getTrainingProgramasName","ErrorPage","TPMainComponent","Footer","jsxDEV","_jsxDEV","TrainingProgramas","_s","muscle","setMuscle","error","setError","data","setData","musclesNames","setMusclesNames","loading","setLoading","flag","setFlag","dataVals","setDataVals","link","topic","information","generalInformation","getDataMusclesNamesFromDB","getMusclesNames","getData","fetchmuscleInformation","response","setAllData","updatedData","musclesInformation","topics","map","info","handleMuscleChange","option","selectedMuscle","find","toRemove","fileName","_jsxFileName","lineNumber","columnNumber","console","log","children","_c","$RefreshReg$"],"sources":["C:/Users/Daniel Maman/git/fitness-web/fitness-web/client/src/pages/TrainingPrograms.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport MainLayout from '../layout/MainLayout.jsx';\r\nimport { getTrainingProgramas, getTrainingProgramasName } from \"../controller/requests.js\";\r\nimport ErrorPage from \"./ErrorPage.jsx\";\r\nimport TPMainComponent from \"../componenets/TrainingProgramsComp/TPMainComponent.jsx\";\r\nimport Footer from '..//componenets//Footer.jsx';\r\n\r\n\r\nconst TrainingProgramas = () => {\r\n    const [muscle, setMuscle] = useState(\"\");\r\n    const [error, setError] = useState(false);\r\n    const [data, setData] = useState([]);\r\n    const [musclesNames, setMusclesNames] = useState([]);\r\n    const [loading, setLoading] = useState(true);\r\n    const [flag, setFlag] = useState(false);\r\n    const [dataVals, setDataVals] = useState({\r\n        link: [],\r\n        topic: [],\r\n        information: [],\r\n        generalInformation: \"\",\r\n    });\r\n\r\n    // get all muscles names from DB on first render\r\n    useEffect(() => {\r\n        const getDataMusclesNamesFromDB = async () => {\r\n            await getMusclesNames();\r\n        }\r\n        getDataMusclesNamesFromDB();\r\n\r\n    }, []);\r\n\r\n    // get all muscles information from DB\r\n    useEffect(() => {\r\n        const getData = async () => {\r\n            await fetchmuscleInformation();\r\n            setLoading(false); // Set loading to false once data is fetched\r\n        }\r\n        getData();\r\n    }, [muscle]);\r\n\r\n    // get all muscles names from DB and set it to musclesNames\r\n    const getMusclesNames = async () => {\r\n        const response = await getTrainingProgramasName();\r\n        if (response === []) {\r\n            setError(true);\r\n            return;\r\n        }\r\n        setMusclesNames(response);\r\n    }\r\n\r\n    // get all muscles information from DB and set it to data\r\n    const fetchmuscleInformation = async () => {\r\n        const response = await getTrainingProgramas(muscle);\r\n        if (response === []) {\r\n            setError(true);\r\n            return;\r\n        }\r\n        setData(response);\r\n        setAllData(response);\r\n    };\r\n\r\n    // set all data to dataVals\r\n    const setAllData = async (data) => {\r\n        if (flag === true) {\r\n            const updatedData = {\r\n                ...dataVals,\r\n                link: data.musclesInformation.topics.map((info) => info.link),\r\n                topic: data.musclesInformation.topics.map((info) => info.topic),\r\n                information: data.musclesInformation.topics.map((info) => info.information),\r\n                generalInformation: data.musclesInformation.generalInformation,\r\n            };\r\n            setDataVals(updatedData);\r\n        }\r\n    };\r\n    // handle muscle change ant flag to true to update dataVals with new data\r\n    const handleMuscleChange = (option) => {\r\n        const selectedMuscle = musclesNames.find(\r\n            (muscle) => muscle === option\r\n        );\r\n        setMuscle(selectedMuscle);\r\n        setFlag(true);\r\n\r\n    };\r\n\r\n    // if error return error page\r\n    if (error) {\r\n        return <ErrorPage toRemove={true} />;\r\n    }\r\n    // if loading the data return loading page\r\n    if (loading) {\r\n        console.log(\"Loading\");\r\n        return <ErrorPage toRemove={false} />;\r\n    } else {\r\n        return (\r\n            <MainLayout>\r\n                <TPMainComponent musclesNames={musclesNames} muscle={muscle} handleMuscleChange={handleMuscleChange} dataVals={dataVals} />\r\n                <hr />\r\n                <Footer />\r\n            </MainLayout>\r\n        );\r\n    };\r\n}\r\nexport default TrainingProgramas;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,UAAU,MAAM,0BAA0B;AACjD,SAASC,oBAAoB,EAAEC,wBAAwB,QAAQ,2BAA2B;AAC1F,OAAOC,SAAS,MAAM,iBAAiB;AACvC,OAAOC,eAAe,MAAM,yDAAyD;AACrF,OAAOC,MAAM,MAAM,6BAA6B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAGjD,MAAMC,iBAAiB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC5B,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACc,KAAK,EAAEC,QAAQ,CAAC,GAAGf,QAAQ,CAAC,KAAK,CAAC;EACzC,MAAM,CAACgB,IAAI,EAAEC,OAAO,CAAC,GAAGjB,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACkB,YAAY,EAAEC,eAAe,CAAC,GAAGnB,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAACoB,OAAO,EAAEC,UAAU,CAAC,GAAGrB,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACsB,IAAI,EAAEC,OAAO,CAAC,GAAGvB,QAAQ,CAAC,KAAK,CAAC;EACvC,MAAM,CAACwB,QAAQ,EAAEC,WAAW,CAAC,GAAGzB,QAAQ,CAAC;IACrC0B,IAAI,EAAE,EAAE;IACRC,KAAK,EAAE,EAAE;IACTC,WAAW,EAAE,EAAE;IACfC,kBAAkB,EAAE;EACxB,CAAC,CAAC;;EAEF;EACA5B,SAAS,CAAC,MAAM;IACZ,MAAM6B,yBAAyB,GAAG,MAAAA,CAAA,KAAY;MAC1C,MAAMC,eAAe,CAAC,CAAC;IAC3B,CAAC;IACDD,yBAAyB,CAAC,CAAC;EAE/B,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA7B,SAAS,CAAC,MAAM;IACZ,MAAM+B,OAAO,GAAG,MAAAA,CAAA,KAAY;MACxB,MAAMC,sBAAsB,CAAC,CAAC;MAC9BZ,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;IACvB,CAAC;;IACDW,OAAO,CAAC,CAAC;EACb,CAAC,EAAE,CAACpB,MAAM,CAAC,CAAC;;EAEZ;EACA,MAAMmB,eAAe,GAAG,MAAAA,CAAA,KAAY;IAChC,MAAMG,QAAQ,GAAG,MAAM9B,wBAAwB,CAAC,CAAC;IACjD,IAAI8B,QAAQ,KAAK,EAAE,EAAE;MACjBnB,QAAQ,CAAC,IAAI,CAAC;MACd;IACJ;IACAI,eAAe,CAACe,QAAQ,CAAC;EAC7B,CAAC;;EAED;EACA,MAAMD,sBAAsB,GAAG,MAAAA,CAAA,KAAY;IACvC,MAAMC,QAAQ,GAAG,MAAM/B,oBAAoB,CAACS,MAAM,CAAC;IACnD,IAAIsB,QAAQ,KAAK,EAAE,EAAE;MACjBnB,QAAQ,CAAC,IAAI,CAAC;MACd;IACJ;IACAE,OAAO,CAACiB,QAAQ,CAAC;IACjBC,UAAU,CAACD,QAAQ,CAAC;EACxB,CAAC;;EAED;EACA,MAAMC,UAAU,GAAG,MAAOnB,IAAI,IAAK;IAC/B,IAAIM,IAAI,KAAK,IAAI,EAAE;MACf,MAAMc,WAAW,GAAG;QAChB,GAAGZ,QAAQ;QACXE,IAAI,EAAEV,IAAI,CAACqB,kBAAkB,CAACC,MAAM,CAACC,GAAG,CAAEC,IAAI,IAAKA,IAAI,CAACd,IAAI,CAAC;QAC7DC,KAAK,EAAEX,IAAI,CAACqB,kBAAkB,CAACC,MAAM,CAACC,GAAG,CAAEC,IAAI,IAAKA,IAAI,CAACb,KAAK,CAAC;QAC/DC,WAAW,EAAEZ,IAAI,CAACqB,kBAAkB,CAACC,MAAM,CAACC,GAAG,CAAEC,IAAI,IAAKA,IAAI,CAACZ,WAAW,CAAC;QAC3EC,kBAAkB,EAAEb,IAAI,CAACqB,kBAAkB,CAACR;MAChD,CAAC;MACDJ,WAAW,CAACW,WAAW,CAAC;IAC5B;EACJ,CAAC;EACD;EACA,MAAMK,kBAAkB,GAAIC,MAAM,IAAK;IACnC,MAAMC,cAAc,GAAGzB,YAAY,CAAC0B,IAAI,CACnChC,MAAM,IAAKA,MAAM,KAAK8B,MAC3B,CAAC;IACD7B,SAAS,CAAC8B,cAAc,CAAC;IACzBpB,OAAO,CAAC,IAAI,CAAC;EAEjB,CAAC;;EAED;EACA,IAAIT,KAAK,EAAE;IACP,oBAAOL,OAAA,CAACJ,SAAS;MAACwC,QAAQ,EAAE;IAAK;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EACxC;EACA;EACA,IAAI7B,OAAO,EAAE;IACT8B,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;IACtB,oBAAO1C,OAAA,CAACJ,SAAS;MAACwC,QAAQ,EAAE;IAAM;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EACzC,CAAC,MAAM;IACH,oBACIxC,OAAA,CAACP,UAAU;MAAAkD,QAAA,gBACP3C,OAAA,CAACH,eAAe;QAACY,YAAY,EAAEA,YAAa;QAACN,MAAM,EAAEA,MAAO;QAAC6B,kBAAkB,EAAEA,kBAAmB;QAACjB,QAAQ,EAAEA;MAAS;QAAAsB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAC3HxC,OAAA;QAAAqC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eACNxC,OAAA,CAACF,MAAM;QAAAuC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACF,CAAC;EAErB;EAAC;AACL,CAAC;AAAAtC,EAAA,CA7FKD,iBAAiB;AAAA2C,EAAA,GAAjB3C,iBAAiB;AA8FvB,eAAeA,iBAAiB;AAAC,IAAA2C,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
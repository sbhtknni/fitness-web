{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Daniel Maman\\\\git\\\\fitness-web\\\\fitness-web\\\\client\\\\src\\\\componenets\\\\ChartTrainingGraph.jsx\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { Chart } from 'chart.js';\nimport 'chartjs-plugin-datalabels';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChartTrainingGraph = () => {\n  _s();\n  const chartRef = React.useRef(null);\n  React.useEffect(() => {\n    const ctxP = chartRef.current.getContext('2d');\n    const myPieChart = new Chart(ctxP, {\n      type: 'pie',\n      data: {\n        labels: ['Red', 'Green', 'Yellow', 'Grey', 'Dark Grey'],\n        datasets: [{\n          data: [210, 130, 120, 160, 120],\n          backgroundColor: ['#F7464A', '#46BFBD', '#FDB45C', '#949FB1', '#4D5360'],\n          hoverBackgroundColor: ['#FF5A5E', '#5AD3D1', '#FFC870', '#A8B3C5', '#616774']\n        }]\n      },\n      options: {\n        responsive: true,\n        legend: {\n          position: 'right',\n          labels: {\n            padding: 20,\n            boxWidth: 10\n          }\n        },\n        plugins: {\n          datalabels: {\n            formatter: (value, ctx) => {\n              let sum = 0;\n              let dataArr = ctx.chart.data.datasets[0].data;\n              dataArr.map(data => {\n                sum += data;\n              });\n              let percentage = (value * 100 / sum).toFixed(2) + '%';\n              return percentage;\n            },\n            color: 'white',\n            labels: {\n              title: {\n                font: {\n                  size: '16'\n                }\n              }\n            }\n          }\n        }\n      }\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    id: \"labelChart\",\n    ref: chartRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 10\n  }, this);\n};\n_s(ChartTrainingGraph, \"X+1SfQQ6xefXNU27aQW843M7cTw=\");\n_c = ChartTrainingGraph;\nexport default ChartTrainingGraph;\nvar _c;\n$RefreshReg$(_c, \"ChartTrainingGraph\");","map":{"version":3,"names":["React","Chart","jsxDEV","_jsxDEV","ChartTrainingGraph","_s","chartRef","useRef","useEffect","ctxP","current","getContext","myPieChart","type","data","labels","datasets","backgroundColor","hoverBackgroundColor","options","responsive","legend","position","padding","boxWidth","plugins","datalabels","formatter","value","ctx","sum","dataArr","chart","map","percentage","toFixed","color","title","font","size","id","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Daniel Maman/git/fitness-web/fitness-web/client/src/componenets/ChartTrainingGraph.jsx"],"sourcesContent":["import React from 'react';\r\nimport { Chart } from 'chart.js';\r\nimport 'chartjs-plugin-datalabels';\r\n\r\nconst ChartTrainingGraph = () => {\r\n  const chartRef = React.useRef(null);\r\n\r\n  React.useEffect(() => {\r\n    const ctxP = chartRef.current.getContext('2d');\r\n    const myPieChart = new Chart(ctxP, {\r\n      type: 'pie',\r\n      data: {\r\n        labels: ['Red', 'Green', 'Yellow', 'Grey', 'Dark Grey'],\r\n        datasets: [\r\n          {\r\n            data: [210, 130, 120, 160, 120],\r\n            backgroundColor: ['#F7464A', '#46BFBD', '#FDB45C', '#949FB1', '#4D5360'],\r\n            hoverBackgroundColor: ['#FF5A5E', '#5AD3D1', '#FFC870', '#A8B3C5', '#616774'],\r\n          },\r\n        ],\r\n      },\r\n      options: {\r\n        responsive: true,\r\n        legend: {\r\n          position: 'right',\r\n          labels: {\r\n            padding: 20,\r\n            boxWidth: 10,\r\n          },\r\n        },\r\n        plugins: {\r\n          datalabels: {\r\n            formatter: (value, ctx) => {\r\n              let sum = 0;\r\n              let dataArr = ctx.chart.data.datasets[0].data;\r\n              dataArr.map((data) => {\r\n                sum += data;\r\n              });\r\n              let percentage = ((value * 100) / sum).toFixed(2) + '%';\r\n              return percentage;\r\n            },\r\n            color: 'white',\r\n            labels: {\r\n              title: {\r\n                font: {\r\n                  size: '16',\r\n                },\r\n              },\r\n            },\r\n          },\r\n        },\r\n      },\r\n    });\r\n  }, []);\r\n\r\n  return <canvas id=\"labelChart\" ref={chartRef}></canvas>;\r\n};\r\n\r\nexport default ChartTrainingGraph;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,KAAK,QAAQ,UAAU;AAChC,OAAO,2BAA2B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnC,MAAMC,kBAAkB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC/B,MAAMC,QAAQ,GAAGN,KAAK,CAACO,MAAM,CAAC,IAAI,CAAC;EAEnCP,KAAK,CAACQ,SAAS,CAAC,MAAM;IACpB,MAAMC,IAAI,GAAGH,QAAQ,CAACI,OAAO,CAACC,UAAU,CAAC,IAAI,CAAC;IAC9C,MAAMC,UAAU,GAAG,IAAIX,KAAK,CAACQ,IAAI,EAAE;MACjCI,IAAI,EAAE,KAAK;MACXC,IAAI,EAAE;QACJC,MAAM,EAAE,CAAC,KAAK,EAAE,OAAO,EAAE,QAAQ,EAAE,MAAM,EAAE,WAAW,CAAC;QACvDC,QAAQ,EAAE,CACR;UACEF,IAAI,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC;UAC/BG,eAAe,EAAE,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,CAAC;UACxEC,oBAAoB,EAAE,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS;QAC9E,CAAC;MAEL,CAAC;MACDC,OAAO,EAAE;QACPC,UAAU,EAAE,IAAI;QAChBC,MAAM,EAAE;UACNC,QAAQ,EAAE,OAAO;UACjBP,MAAM,EAAE;YACNQ,OAAO,EAAE,EAAE;YACXC,QAAQ,EAAE;UACZ;QACF,CAAC;QACDC,OAAO,EAAE;UACPC,UAAU,EAAE;YACVC,SAAS,EAAEA,CAACC,KAAK,EAAEC,GAAG,KAAK;cACzB,IAAIC,GAAG,GAAG,CAAC;cACX,IAAIC,OAAO,GAAGF,GAAG,CAACG,KAAK,CAAClB,IAAI,CAACE,QAAQ,CAAC,CAAC,CAAC,CAACF,IAAI;cAC7CiB,OAAO,CAACE,GAAG,CAAEnB,IAAI,IAAK;gBACpBgB,GAAG,IAAIhB,IAAI;cACb,CAAC,CAAC;cACF,IAAIoB,UAAU,GAAG,CAAEN,KAAK,GAAG,GAAG,GAAIE,GAAG,EAAEK,OAAO,CAAC,CAAC,CAAC,GAAG,GAAG;cACvD,OAAOD,UAAU;YACnB,CAAC;YACDE,KAAK,EAAE,OAAO;YACdrB,MAAM,EAAE;cACNsB,KAAK,EAAE;gBACLC,IAAI,EAAE;kBACJC,IAAI,EAAE;gBACR;cACF;YACF;UACF;QACF;MACF;IACF,CAAC,CAAC;EACJ,CAAC,EAAE,EAAE,CAAC;EAEN,oBAAOpC,OAAA;IAAQqC,EAAE,EAAC,YAAY;IAACC,GAAG,EAAEnC;EAAS;IAAAoC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAS,CAAC;AACzD,CAAC;AAACxC,EAAA,CApDID,kBAAkB;AAAA0C,EAAA,GAAlB1C,kBAAkB;AAsDxB,eAAeA,kBAAkB;AAAC,IAAA0C,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
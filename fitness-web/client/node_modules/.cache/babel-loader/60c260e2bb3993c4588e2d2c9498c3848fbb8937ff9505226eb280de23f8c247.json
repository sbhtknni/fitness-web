{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Daniel Maman\\\\git\\\\fitness-web\\\\fitness-web\\\\client\\\\src\\\\componenets\\\\ChartTrainingGraph.jsx\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { Chart } from 'chart.js';\nimport 'chartjs-plugin-datalabels';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChartTrainigGraph = _ref => {\n  _s();\n  let {\n    selectedTrainings\n  } = _ref;\n  const chartRef = React.useRef(null);\n  const weights = selectedTrainings.map(training => training.weight);\n  const trainingNames = selectedTrainings.map(training => training.name);\n  React.useEffect(() => {\n    const ctxP = chartRef.current.getContext('2d');\n    let myPieChart = null;\n    const createChart = () => {\n      const colors = generateColors(trainingNames.length);\n      myPieChart = new Chart(ctxP, {\n        type: 'pie',\n        data: {\n          labels: trainingNames,\n          datasets: [{\n            data: weights,\n            backgroundColor: colors,\n            hoverBackgroundColor: colors\n          }]\n        },\n        options: {\n          responsive: true,\n          legend: {\n            position: 'right',\n            labels: {\n              padding: 20,\n              boxWidth: 10\n            }\n          },\n          plugins: {\n            datalabels: {\n              formatter: (value, ctx) => {\n                let sum = 0;\n                let dataArr = ctx.chart.data.datasets[0].data;\n                dataArr.map(data => {\n                  sum += data;\n                });\n                let percentage = (value * 100 / sum).toFixed(2) + '%';\n                return percentage;\n              },\n              color: 'white',\n              labels: {\n                title: {\n                  font: {\n                    size: '16'\n                  }\n                }\n              }\n            }\n          }\n        }\n      });\n    };\n    const destroyChart = () => {\n      if (myPieChart) {\n        myPieChart.destroy();\n        myPieChart = null;\n      }\n    };\n    destroyChart(); // Destroy any existing chart instance\n    createChart(); // Create the new chart\n\n    return () => {\n      destroyChart(); // Clean up the chart on unmount\n    };\n  }, [selectedTrainings]); // Include selectedTrainings in the dependency array to update the chart when it changes\n\n  const generateColors = count => {\n    const colors = [];\n    for (let i = 0; i < count; i++) {\n      const hue = i * 360 / count;\n      const color = `hsl(${hue}, 50%, 60%)`;\n      colors.push(color);\n    }\n    return colors;\n  };\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    id: \"labelChart\",\n    ref: chartRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 10\n  }, this);\n};\n_s(ChartTrainigGraph, \"X+1SfQQ6xefXNU27aQW843M7cTw=\");\n_c = ChartTrainigGraph;\nexport default ChartTrainigGraph;\nvar _c;\n$RefreshReg$(_c, \"ChartTrainigGraph\");","map":{"version":3,"names":["React","Chart","jsxDEV","_jsxDEV","ChartTrainigGraph","_ref","_s","selectedTrainings","chartRef","useRef","weights","map","training","weight","trainingNames","name","useEffect","ctxP","current","getContext","myPieChart","createChart","colors","generateColors","length","type","data","labels","datasets","backgroundColor","hoverBackgroundColor","options","responsive","legend","position","padding","boxWidth","plugins","datalabels","formatter","value","ctx","sum","dataArr","chart","percentage","toFixed","color","title","font","size","destroyChart","destroy","count","i","hue","push","id","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Daniel Maman/git/fitness-web/fitness-web/client/src/componenets/ChartTrainingGraph.jsx"],"sourcesContent":["import React from 'react';\r\nimport { Chart } from 'chart.js';\r\nimport 'chartjs-plugin-datalabels';\r\n\r\nconst ChartTrainigGraph = ({ selectedTrainings }) => {\r\n  const chartRef = React.useRef(null);\r\n  const weights = selectedTrainings.map((training) => training.weight);\r\n  const trainingNames = selectedTrainings.map((training) => training.name);\r\n\r\n  React.useEffect(() => {\r\n    const ctxP = chartRef.current.getContext('2d');\r\n    let myPieChart = null;\r\n\r\n    const createChart = () => {\r\n      const colors = generateColors(trainingNames.length);\r\n\r\n      myPieChart = new Chart(ctxP, {\r\n        type: 'pie',\r\n        data: {\r\n          labels: trainingNames,\r\n          datasets: [\r\n            {\r\n              data: weights,\r\n              backgroundColor: colors,\r\n              hoverBackgroundColor: colors,\r\n            },\r\n          ],\r\n        },\r\n        options: {\r\n          responsive: true,\r\n          legend: {\r\n            position: 'right',\r\n            labels: {\r\n              padding: 20,\r\n              boxWidth: 10,\r\n            },\r\n          },\r\n          plugins: {\r\n            datalabels: {\r\n              formatter: (value, ctx) => {\r\n                let sum = 0;\r\n                let dataArr = ctx.chart.data.datasets[0].data;\r\n                dataArr.map((data) => {\r\n                  sum += data;\r\n                });\r\n                let percentage = ((value * 100) / sum).toFixed(2) + '%';\r\n                return percentage;\r\n              },\r\n              color: 'white',\r\n              labels: {\r\n                title: {\r\n                  font: {\r\n                    size: '16',\r\n                  },\r\n                },\r\n              },\r\n            },\r\n          },\r\n        },\r\n      });\r\n    };\r\n\r\n    const destroyChart = () => {\r\n      if (myPieChart) {\r\n        myPieChart.destroy();\r\n        myPieChart = null;\r\n      }\r\n    };\r\n\r\n    destroyChart(); // Destroy any existing chart instance\r\n    createChart(); // Create the new chart\r\n\r\n    return () => {\r\n      destroyChart(); // Clean up the chart on unmount\r\n    };\r\n  }, [selectedTrainings]); // Include selectedTrainings in the dependency array to update the chart when it changes\r\n\r\n  const generateColors = (count) => {\r\n    const colors = [];\r\n    for (let i = 0; i < count; i++) {\r\n      const hue = (i * 360) / count;\r\n      const color = `hsl(${hue}, 50%, 60%)`;\r\n      colors.push(color);\r\n    }\r\n    return colors;\r\n  };\r\n\r\n  return <canvas id=\"labelChart\" ref={chartRef}></canvas>;\r\n};\r\n\r\nexport default ChartTrainigGraph;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
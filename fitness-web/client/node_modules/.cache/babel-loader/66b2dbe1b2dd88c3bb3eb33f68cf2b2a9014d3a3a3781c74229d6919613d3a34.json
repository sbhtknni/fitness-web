{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Daniel Maman\\\\git\\\\fitness-web\\\\fitness-web\\\\client\\\\src\\\\componenets\\\\ChartTrainingGraph.jsx\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { Chart } from 'chart.js';\nimport 'chartjs-plugin-datalabels';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChartTrainigGraph = () => {\n  _s();\n  const chartRef = React.useRef(null);\n  React.useEffect(() => {\n    const ctxP = chartRef.current.getContext('2d');\n    let myPieChart = null;\n    const createChart = () => {\n      myPieChart = new Chart(ctxP, {\n        type: 'pie',\n        data: {\n          labels: ['Red', 'Green', 'Yellow', 'Grey', 'Dark Grey'],\n          datasets: [{\n            data: [210, 130, 120, 160, 120],\n            backgroundColor: ['#F7464A', '#46BFBD', '#FDB45C', '#949FB1', '#4D5360'],\n            hoverBackgroundColor: ['#FF5A5E', '#5AD3D1', '#FFC870', '#A8B3C5', '#616774']\n          }]\n        },\n        options: {\n          responsive: true,\n          legend: {\n            position: 'right',\n            labels: {\n              padding: 20,\n              boxWidth: 10\n            }\n          },\n          plugins: {\n            datalabels: {\n              formatter: (value, ctx) => {\n                let sum = 0;\n                let dataArr = ctx.chart.data.datasets[0].data;\n                dataArr.map(data => {\n                  sum += data;\n                });\n                let percentage = (value * 100 / sum).toFixed(2) + '%';\n                return percentage;\n              },\n              color: 'white',\n              labels: {\n                title: {\n                  font: {\n                    size: '16'\n                  }\n                }\n              }\n            }\n          }\n        }\n      });\n    };\n    const destroyChart = () => {\n      if (myPieChart) {\n        myPieChart.destroy();\n        myPieChart = null;\n      }\n    };\n    destroyChart(); // Destroy any existing chart instance\n    createChart(); // Create the new chart\n\n    return () => {\n      destroyChart(); // Clean up the chart on unmount\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    id: \"labelChart\",\n    ref: chartRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 10\n  }, this);\n};\n_s(ChartTrainigGraph, \"X+1SfQQ6xefXNU27aQW843M7cTw=\");\n_c = ChartTrainigGraph;\nexport default ChartTrainigGraph;\nvar _c;\n$RefreshReg$(_c, \"ChartTrainigGraph\");","map":{"version":3,"names":["React","Chart","jsxDEV","_jsxDEV","ChartTrainigGraph","_s","chartRef","useRef","useEffect","ctxP","current","getContext","myPieChart","createChart","type","data","labels","datasets","backgroundColor","hoverBackgroundColor","options","responsive","legend","position","padding","boxWidth","plugins","datalabels","formatter","value","ctx","sum","dataArr","chart","map","percentage","toFixed","color","title","font","size","destroyChart","destroy","id","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Daniel Maman/git/fitness-web/fitness-web/client/src/componenets/ChartTrainingGraph.jsx"],"sourcesContent":["import React from 'react';\r\nimport { Chart } from 'chart.js';\r\nimport 'chartjs-plugin-datalabels';\r\n\r\nconst ChartTrainigGraph = () => {\r\n  const chartRef = React.useRef(null);\r\n\r\n  React.useEffect(() => {\r\n    const ctxP = chartRef.current.getContext('2d');\r\n    let myPieChart = null;\r\n\r\n    const createChart = () => {\r\n      myPieChart = new Chart(ctxP, {\r\n        type: 'pie',\r\n        data: {\r\n          labels: ['Red', 'Green', 'Yellow', 'Grey', 'Dark Grey'],\r\n          datasets: [\r\n            {\r\n              data: [210, 130, 120, 160, 120],\r\n              backgroundColor: ['#F7464A', '#46BFBD', '#FDB45C', '#949FB1', '#4D5360'],\r\n              hoverBackgroundColor: ['#FF5A5E', '#5AD3D1', '#FFC870', '#A8B3C5', '#616774'],\r\n            },\r\n          ],\r\n        },\r\n        options: {\r\n          responsive: true,\r\n          legend: {\r\n            position: 'right',\r\n            labels: {\r\n              padding: 20,\r\n              boxWidth: 10,\r\n            },\r\n          },\r\n          plugins: {\r\n            datalabels: {\r\n              formatter: (value, ctx) => {\r\n                let sum = 0;\r\n                let dataArr = ctx.chart.data.datasets[0].data;\r\n                dataArr.map((data) => {\r\n                  sum += data;\r\n                });\r\n                let percentage = ((value * 100) / sum).toFixed(2) + '%';\r\n                return percentage;\r\n              },\r\n              color: 'white',\r\n              labels: {\r\n                title: {\r\n                  font: {\r\n                    size: '16',\r\n                  },\r\n                },\r\n              },\r\n            },\r\n          },\r\n        },\r\n      });\r\n    };\r\n\r\n    const destroyChart = () => {\r\n      if (myPieChart) {\r\n        myPieChart.destroy();\r\n        myPieChart = null;\r\n      }\r\n    };\r\n\r\n    destroyChart(); // Destroy any existing chart instance\r\n    createChart(); // Create the new chart\r\n\r\n    return () => {\r\n      destroyChart(); // Clean up the chart on unmount\r\n    };\r\n  }, []);\r\n\r\n  return <canvas id=\"labelChart\" ref={chartRef}></canvas>;\r\n};\r\n\r\nexport default ChartTrainigGraph;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,KAAK,QAAQ,UAAU;AAChC,OAAO,2BAA2B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnC,MAAMC,iBAAiB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC9B,MAAMC,QAAQ,GAAGN,KAAK,CAACO,MAAM,CAAC,IAAI,CAAC;EAEnCP,KAAK,CAACQ,SAAS,CAAC,MAAM;IACpB,MAAMC,IAAI,GAAGH,QAAQ,CAACI,OAAO,CAACC,UAAU,CAAC,IAAI,CAAC;IAC9C,IAAIC,UAAU,GAAG,IAAI;IAErB,MAAMC,WAAW,GAAGA,CAAA,KAAM;MACxBD,UAAU,GAAG,IAAIX,KAAK,CAACQ,IAAI,EAAE;QAC3BK,IAAI,EAAE,KAAK;QACXC,IAAI,EAAE;UACJC,MAAM,EAAE,CAAC,KAAK,EAAE,OAAO,EAAE,QAAQ,EAAE,MAAM,EAAE,WAAW,CAAC;UACvDC,QAAQ,EAAE,CACR;YACEF,IAAI,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC;YAC/BG,eAAe,EAAE,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,CAAC;YACxEC,oBAAoB,EAAE,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS;UAC9E,CAAC;QAEL,CAAC;QACDC,OAAO,EAAE;UACPC,UAAU,EAAE,IAAI;UAChBC,MAAM,EAAE;YACNC,QAAQ,EAAE,OAAO;YACjBP,MAAM,EAAE;cACNQ,OAAO,EAAE,EAAE;cACXC,QAAQ,EAAE;YACZ;UACF,CAAC;UACDC,OAAO,EAAE;YACPC,UAAU,EAAE;cACVC,SAAS,EAAEA,CAACC,KAAK,EAAEC,GAAG,KAAK;gBACzB,IAAIC,GAAG,GAAG,CAAC;gBACX,IAAIC,OAAO,GAAGF,GAAG,CAACG,KAAK,CAAClB,IAAI,CAACE,QAAQ,CAAC,CAAC,CAAC,CAACF,IAAI;gBAC7CiB,OAAO,CAACE,GAAG,CAAEnB,IAAI,IAAK;kBACpBgB,GAAG,IAAIhB,IAAI;gBACb,CAAC,CAAC;gBACF,IAAIoB,UAAU,GAAG,CAAEN,KAAK,GAAG,GAAG,GAAIE,GAAG,EAAEK,OAAO,CAAC,CAAC,CAAC,GAAG,GAAG;gBACvD,OAAOD,UAAU;cACnB,CAAC;cACDE,KAAK,EAAE,OAAO;cACdrB,MAAM,EAAE;gBACNsB,KAAK,EAAE;kBACLC,IAAI,EAAE;oBACJC,IAAI,EAAE;kBACR;gBACF;cACF;YACF;UACF;QACF;MACF,CAAC,CAAC;IACJ,CAAC;IAED,MAAMC,YAAY,GAAGA,CAAA,KAAM;MACzB,IAAI7B,UAAU,EAAE;QACdA,UAAU,CAAC8B,OAAO,CAAC,CAAC;QACpB9B,UAAU,GAAG,IAAI;MACnB;IACF,CAAC;IAED6B,YAAY,CAAC,CAAC,CAAC,CAAC;IAChB5B,WAAW,CAAC,CAAC,CAAC,CAAC;;IAEf,OAAO,MAAM;MACX4B,YAAY,CAAC,CAAC,CAAC,CAAC;IAClB,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,oBAAOtC,OAAA;IAAQwC,EAAE,EAAC,YAAY;IAACC,GAAG,EAAEtC;EAAS;IAAAuC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAS,CAAC;AACzD,CAAC;AAAC3C,EAAA,CAtEID,iBAAiB;AAAA6C,EAAA,GAAjB7C,iBAAiB;AAwEvB,eAAeA,iBAAiB;AAAC,IAAA6C,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
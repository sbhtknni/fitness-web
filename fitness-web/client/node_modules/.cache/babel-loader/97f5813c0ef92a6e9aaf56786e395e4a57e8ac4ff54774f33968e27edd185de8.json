{"ast":null,"code":"import { Alert } from \"react-bootstrap\";\nexport function calculateAverage(weights) {\n  let sum = 0;\n  for (let i = 0; i < weights.length; i++) {\n    sum += weights[i];\n  }\n  return sum / weights.length;\n}\nexport function calculateMax(weights) {\n  let max = weights[0];\n  for (let i = 1; i < weights.length; i++) {\n    if (weights[i] > max) {\n      max = weights[i];\n    }\n  }\n  if (max != null) return max.toFixed(2);\n}\n// export function maxWeight = calculateMax(weights);\n\nexport function calculateMin(weights) {\n  let min = weights[0];\n  for (let i = 1; i < weights.length; i++) {\n    if (weights[i] < min) {\n      min = weights[i];\n    }\n  }\n  return min;\n}\n// export function minWeight = calculateMin(weights);\n\nexport function calculateVariance(weights) {\n  let sum = 0;\n  for (let i = 0; i < weights.length; i++) {\n    sum += weights[i];\n  }\n  const average = sum / weights.length;\n  let variance = 0;\n  for (let i = 0; i < weights.length; i++) {\n    variance += Math.pow(weights[i] - average, 2);\n  }\n  return (variance / weights.length).toFixed(2);\n  ;\n}\n// export function varianceWeight = calculateVariance(weights);\n\nexport function calculateStandardDeviation(weights) {\n  return Math.sqrt(calculateVariance(weights)).toFixed(2);\n}\n// export function standardDeviationWeight = calculateStandardDeviation(weights);\n\nexport function calculateMedian(weights) {\n  const sortedWeights = weights.sort();\n  const middle = Math.floor(sortedWeights.length / 2);\n  if (sortedWeights.length % 2 === 0) {\n    return (sortedWeights[middle] + sortedWeights[middle - 1]) / 2;\n  }\n  return sortedWeights[middle];\n}\n// export function medianWeight = calculateMedian(weights);\n\nexport function calculatePopularName(trainingNames) {\n  const nameCount = {};\n  for (let i = 0; i < trainingNames.length; i++) {\n    if (nameCount[trainingNames[i]]) {\n      nameCount[trainingNames[i]]++;\n    } else {\n      nameCount[trainingNames[i]] = 1;\n    }\n  }\n  let maxCount = 0;\n  let maxName = \"\";\n  for (const name in nameCount) {\n    if (nameCount[name] > maxCount) {\n      maxCount = nameCount[name];\n      maxName = name;\n    }\n  }\n  return maxName;\n}\nexport function currentTrainingName(trainingNames) {\n  return trainingNames[trainingNames.length - 1];\n}\n\n// export function calculateWeightLoss = calculateWeightLoss(dates, weights, trainingNames)\n// calc the weight loss per program and return the max weight loss program;\n\nexport function calculateWeightLoss(selectedTrainings) {\n  if (selectedTrainings.length < 2) {\n    const singleTraining = selectedTrainings[0];\n    return {\n      optimalProgram: singleTraining.name,\n      maxWeightLoss: 0,\n      WeightLossPercentage: 0\n    };\n  }\n  let optimalProgram = null;\n  let maxWeightLoss = 0;\n  let weightForPercentage = 0;\n  for (let i = 0; i < selectedTrainings.length - 1; i++) {\n    const currentTraining = selectedTrainings[i];\n    const nextTraining = selectedTrainings[i + 1];\n    const weightLoss = nextTraining.weight - currentTraining.weight;\n    const weightLossPercentage = weightLoss / nextTraining.weight * 100;\n    if (weightLoss > maxWeightLoss) {\n      optimalProgram = currentTraining.name;\n      maxWeightLoss = weightLoss;\n      weightForPercentage = nextTraining.weight;\n    }\n  }\n  const WeightLossPercentage = maxWeightLoss / weightForPercentage * 100;\n  console.log(maxWeightLoss);\n  console.log(optimalProgram);\n  console.log(WeightLossPercentage);\n  return {\n    optimalProgram,\n    maxWeightLoss,\n    WeightLossPercentage: WeightLossPercentage.toFixed(2)\n  };\n}","map":{"version":3,"names":["Alert","calculateAverage","weights","sum","i","length","calculateMax","max","toFixed","calculateMin","min","calculateVariance","average","variance","Math","pow","calculateStandardDeviation","sqrt","calculateMedian","sortedWeights","sort","middle","floor","calculatePopularName","trainingNames","nameCount","maxCount","maxName","name","currentTrainingName","calculateWeightLoss","selectedTrainings","singleTraining","optimalProgram","maxWeightLoss","WeightLossPercentage","weightForPercentage","currentTraining","nextTraining","weightLoss","weight","weightLossPercentage","console","log"],"sources":["C:/Users/Daniel Maman/git/fitness-web/fitness-web/client/src/controller/utils/util_home_page.js"],"sourcesContent":["import { Alert } from \"react-bootstrap\";\r\n\r\nexport function calculateAverage(weights) {\r\n    let sum = 0;\r\n    for (let i = 0; i < weights.length; i++) {\r\n        sum += weights[i];\r\n    }\r\n    return sum / weights.length;\r\n}\r\n\r\nexport function calculateMax(weights) {\r\n    let max = weights[0];\r\n    for (let i = 1; i < weights.length; i++) {\r\n        if (weights[i] > max) {\r\n            max = weights[i];\r\n        }\r\n    }\r\n    if (max != null)\r\n        return max.toFixed(2);\r\n}\r\n// export function maxWeight = calculateMax(weights);\r\n\r\nexport function calculateMin(weights) {\r\n    let min = weights[0];\r\n    for (let i = 1; i < weights.length; i++) {\r\n        if (weights[i] < min) {\r\n            min = weights[i];\r\n        }\r\n    }\r\n    return min;\r\n}\r\n// export function minWeight = calculateMin(weights);\r\n\r\nexport function calculateVariance(weights) {\r\n    let sum = 0;\r\n    for (let i = 0; i < weights.length; i++) {\r\n        sum += weights[i];\r\n    }\r\n    const average = sum / weights.length;\r\n    let variance = 0;\r\n    for (let i = 0; i < weights.length; i++) {\r\n        variance += Math.pow(weights[i] - average, 2);\r\n    }\r\n    return (variance / weights.length).toFixed(2);;\r\n}\r\n// export function varianceWeight = calculateVariance(weights);\r\n\r\nexport function calculateStandardDeviation(weights) {\r\n    return (Math.sqrt(calculateVariance(weights)).toFixed(2));\r\n}\r\n// export function standardDeviationWeight = calculateStandardDeviation(weights);\r\n\r\nexport function calculateMedian(weights) {\r\n    const sortedWeights = weights.sort();\r\n    const middle = Math.floor(sortedWeights.length / 2);\r\n    if (sortedWeights.length % 2 === 0) {\r\n        return (sortedWeights[middle] + sortedWeights[middle - 1]) / 2;\r\n    }\r\n    return sortedWeights[middle];\r\n}\r\n// export function medianWeight = calculateMedian(weights);\r\n\r\nexport function calculatePopularName(trainingNames) {\r\n    const nameCount = {};\r\n    for (let i = 0; i < trainingNames.length; i++) {\r\n        if (nameCount[trainingNames[i]]) {\r\n            nameCount[trainingNames[i]]++;\r\n        } else {\r\n            nameCount[trainingNames[i]] = 1;\r\n        }\r\n    }\r\n    let maxCount = 0;\r\n    let maxName = \"\";\r\n    for (const name in nameCount) {\r\n        if (nameCount[name] > maxCount) {\r\n            maxCount = nameCount[name];\r\n            maxName = name;\r\n        }\r\n    }\r\n    return maxName;\r\n}\r\n\r\nexport function currentTrainingName(trainingNames) {\r\n    return trainingNames[trainingNames.length - 1];\r\n}\r\n\r\n// export function calculateWeightLoss = calculateWeightLoss(dates, weights, trainingNames)\r\n// calc the weight loss per program and return the max weight loss program;\r\n\r\nexport function calculateWeightLoss(selectedTrainings) {\r\n    \r\n    if (selectedTrainings.length < 2) {\r\n        const singleTraining = selectedTrainings[0];\r\n        return {\r\n          optimalProgram: singleTraining.name,\r\n          maxWeightLoss: 0,\r\n          WeightLossPercentage: 0,\r\n        };\r\n      }\r\n    \r\n    let optimalProgram = null;\r\n    let maxWeightLoss = 0;\r\n    let weightForPercentage = 0;\r\n  \r\n    for (let i = 0; i < selectedTrainings.length - 1; i++) {\r\n      const currentTraining = selectedTrainings[i];\r\n      const nextTraining = selectedTrainings[i + 1];\r\n  \r\n      const weightLoss = nextTraining.weight - currentTraining.weight;\r\n      const weightLossPercentage = (weightLoss / nextTraining.weight) * 100;\r\n  \r\n      if (weightLoss > maxWeightLoss) {\r\n        optimalProgram = currentTraining.name;\r\n        maxWeightLoss = weightLoss;\r\n        weightForPercentage = nextTraining.weight;\r\n      }\r\n    }\r\n  \r\n    const WeightLossPercentage = (maxWeightLoss / weightForPercentage) * 100;\r\n  \r\n    console.log(maxWeightLoss);\r\n    console.log(optimalProgram);\r\n    console.log(WeightLossPercentage);\r\n  \r\n    return {\r\n      optimalProgram,\r\n      maxWeightLoss,\r\n      WeightLossPercentage: WeightLossPercentage.toFixed(2) ,\r\n    };\r\n  }\r\n  \r\n\r\n\r\n\r\n"],"mappings":"AAAA,SAASA,KAAK,QAAQ,iBAAiB;AAEvC,OAAO,SAASC,gBAAgBA,CAACC,OAAO,EAAE;EACtC,IAAIC,GAAG,GAAG,CAAC;EACX,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,OAAO,CAACG,MAAM,EAAED,CAAC,EAAE,EAAE;IACrCD,GAAG,IAAID,OAAO,CAACE,CAAC,CAAC;EACrB;EACA,OAAOD,GAAG,GAAGD,OAAO,CAACG,MAAM;AAC/B;AAEA,OAAO,SAASC,YAAYA,CAACJ,OAAO,EAAE;EAClC,IAAIK,GAAG,GAAGL,OAAO,CAAC,CAAC,CAAC;EACpB,KAAK,IAAIE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,OAAO,CAACG,MAAM,EAAED,CAAC,EAAE,EAAE;IACrC,IAAIF,OAAO,CAACE,CAAC,CAAC,GAAGG,GAAG,EAAE;MAClBA,GAAG,GAAGL,OAAO,CAACE,CAAC,CAAC;IACpB;EACJ;EACA,IAAIG,GAAG,IAAI,IAAI,EACX,OAAOA,GAAG,CAACC,OAAO,CAAC,CAAC,CAAC;AAC7B;AACA;;AAEA,OAAO,SAASC,YAAYA,CAACP,OAAO,EAAE;EAClC,IAAIQ,GAAG,GAAGR,OAAO,CAAC,CAAC,CAAC;EACpB,KAAK,IAAIE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,OAAO,CAACG,MAAM,EAAED,CAAC,EAAE,EAAE;IACrC,IAAIF,OAAO,CAACE,CAAC,CAAC,GAAGM,GAAG,EAAE;MAClBA,GAAG,GAAGR,OAAO,CAACE,CAAC,CAAC;IACpB;EACJ;EACA,OAAOM,GAAG;AACd;AACA;;AAEA,OAAO,SAASC,iBAAiBA,CAACT,OAAO,EAAE;EACvC,IAAIC,GAAG,GAAG,CAAC;EACX,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,OAAO,CAACG,MAAM,EAAED,CAAC,EAAE,EAAE;IACrCD,GAAG,IAAID,OAAO,CAACE,CAAC,CAAC;EACrB;EACA,MAAMQ,OAAO,GAAGT,GAAG,GAAGD,OAAO,CAACG,MAAM;EACpC,IAAIQ,QAAQ,GAAG,CAAC;EAChB,KAAK,IAAIT,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,OAAO,CAACG,MAAM,EAAED,CAAC,EAAE,EAAE;IACrCS,QAAQ,IAAIC,IAAI,CAACC,GAAG,CAACb,OAAO,CAACE,CAAC,CAAC,GAAGQ,OAAO,EAAE,CAAC,CAAC;EACjD;EACA,OAAO,CAACC,QAAQ,GAAGX,OAAO,CAACG,MAAM,EAAEG,OAAO,CAAC,CAAC,CAAC;EAAC;AAClD;AACA;;AAEA,OAAO,SAASQ,0BAA0BA,CAACd,OAAO,EAAE;EAChD,OAAQY,IAAI,CAACG,IAAI,CAACN,iBAAiB,CAACT,OAAO,CAAC,CAAC,CAACM,OAAO,CAAC,CAAC,CAAC;AAC5D;AACA;;AAEA,OAAO,SAASU,eAAeA,CAAChB,OAAO,EAAE;EACrC,MAAMiB,aAAa,GAAGjB,OAAO,CAACkB,IAAI,CAAC,CAAC;EACpC,MAAMC,MAAM,GAAGP,IAAI,CAACQ,KAAK,CAACH,aAAa,CAACd,MAAM,GAAG,CAAC,CAAC;EACnD,IAAIc,aAAa,CAACd,MAAM,GAAG,CAAC,KAAK,CAAC,EAAE;IAChC,OAAO,CAACc,aAAa,CAACE,MAAM,CAAC,GAAGF,aAAa,CAACE,MAAM,GAAG,CAAC,CAAC,IAAI,CAAC;EAClE;EACA,OAAOF,aAAa,CAACE,MAAM,CAAC;AAChC;AACA;;AAEA,OAAO,SAASE,oBAAoBA,CAACC,aAAa,EAAE;EAChD,MAAMC,SAAS,GAAG,CAAC,CAAC;EACpB,KAAK,IAAIrB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGoB,aAAa,CAACnB,MAAM,EAAED,CAAC,EAAE,EAAE;IAC3C,IAAIqB,SAAS,CAACD,aAAa,CAACpB,CAAC,CAAC,CAAC,EAAE;MAC7BqB,SAAS,CAACD,aAAa,CAACpB,CAAC,CAAC,CAAC,EAAE;IACjC,CAAC,MAAM;MACHqB,SAAS,CAACD,aAAa,CAACpB,CAAC,CAAC,CAAC,GAAG,CAAC;IACnC;EACJ;EACA,IAAIsB,QAAQ,GAAG,CAAC;EAChB,IAAIC,OAAO,GAAG,EAAE;EAChB,KAAK,MAAMC,IAAI,IAAIH,SAAS,EAAE;IAC1B,IAAIA,SAAS,CAACG,IAAI,CAAC,GAAGF,QAAQ,EAAE;MAC5BA,QAAQ,GAAGD,SAAS,CAACG,IAAI,CAAC;MAC1BD,OAAO,GAAGC,IAAI;IAClB;EACJ;EACA,OAAOD,OAAO;AAClB;AAEA,OAAO,SAASE,mBAAmBA,CAACL,aAAa,EAAE;EAC/C,OAAOA,aAAa,CAACA,aAAa,CAACnB,MAAM,GAAG,CAAC,CAAC;AAClD;;AAEA;AACA;;AAEA,OAAO,SAASyB,mBAAmBA,CAACC,iBAAiB,EAAE;EAEnD,IAAIA,iBAAiB,CAAC1B,MAAM,GAAG,CAAC,EAAE;IAC9B,MAAM2B,cAAc,GAAGD,iBAAiB,CAAC,CAAC,CAAC;IAC3C,OAAO;MACLE,cAAc,EAAED,cAAc,CAACJ,IAAI;MACnCM,aAAa,EAAE,CAAC;MAChBC,oBAAoB,EAAE;IACxB,CAAC;EACH;EAEF,IAAIF,cAAc,GAAG,IAAI;EACzB,IAAIC,aAAa,GAAG,CAAC;EACrB,IAAIE,mBAAmB,GAAG,CAAC;EAE3B,KAAK,IAAIhC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG2B,iBAAiB,CAAC1B,MAAM,GAAG,CAAC,EAAED,CAAC,EAAE,EAAE;IACrD,MAAMiC,eAAe,GAAGN,iBAAiB,CAAC3B,CAAC,CAAC;IAC5C,MAAMkC,YAAY,GAAGP,iBAAiB,CAAC3B,CAAC,GAAG,CAAC,CAAC;IAE7C,MAAMmC,UAAU,GAAGD,YAAY,CAACE,MAAM,GAAGH,eAAe,CAACG,MAAM;IAC/D,MAAMC,oBAAoB,GAAIF,UAAU,GAAGD,YAAY,CAACE,MAAM,GAAI,GAAG;IAErE,IAAID,UAAU,GAAGL,aAAa,EAAE;MAC9BD,cAAc,GAAGI,eAAe,CAACT,IAAI;MACrCM,aAAa,GAAGK,UAAU;MAC1BH,mBAAmB,GAAGE,YAAY,CAACE,MAAM;IAC3C;EACF;EAEA,MAAML,oBAAoB,GAAID,aAAa,GAAGE,mBAAmB,GAAI,GAAG;EAExEM,OAAO,CAACC,GAAG,CAACT,aAAa,CAAC;EAC1BQ,OAAO,CAACC,GAAG,CAACV,cAAc,CAAC;EAC3BS,OAAO,CAACC,GAAG,CAACR,oBAAoB,CAAC;EAEjC,OAAO;IACLF,cAAc;IACdC,aAAa;IACbC,oBAAoB,EAAEA,oBAAoB,CAAC3B,OAAO,CAAC,CAAC;EACtD,CAAC;AACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}
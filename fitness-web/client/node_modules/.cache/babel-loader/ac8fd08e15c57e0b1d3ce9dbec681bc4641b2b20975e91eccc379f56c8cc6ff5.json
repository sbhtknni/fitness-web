{"ast":null,"code":"export function calculateAverage(weights) {\n  let sum = 0;\n  for (let i = 0; i < weights.length; i++) {\n    sum += weights[i];\n  }\n  return sum / weights.length;\n}\nexport function calculateMax(weights) {\n  let max = weights[0];\n  for (let i = 1; i < weights.length; i++) {\n    if (weights[i] > max) {\n      max = weights[i];\n    }\n  }\n  return max;\n}\n// export function maxWeight = calculateMax(weights);\n\nexport function calculateMin(weights) {\n  let min = weights[0];\n  for (let i = 1; i < weights.length; i++) {\n    if (weights[i] < min) {\n      min = weights[i];\n    }\n  }\n  return min;\n}\n// export function minWeight = calculateMin(weights);\n\nexport function calculateVariance(weights) {\n  let sum = 0;\n  for (let i = 0; i < weights.length; i++) {\n    sum += weights[i];\n  }\n  const average = sum / weights.length;\n  let variance = 0;\n  for (let i = 0; i < weights.length; i++) {\n    variance += Math.pow(weights[i] - average, 2);\n  }\n  return variance / weights.length;\n}\n// export function varianceWeight = calculateVariance(weights);\n\nexport function calculateStandardDeviation(weights) {\n  return Math.sqrt(calculateVariance(weights));\n}\n// export function standardDeviationWeight = calculateStandardDeviation(weights);\n\nexport function calculateMedian(weights) {\n  const sortedWeights = weights.sort();\n  const middle = Math.floor(sortedWeights.length / 2);\n  if (sortedWeights.length % 2 === 0) {\n    return (sortedWeights[middle] + sortedWeights[middle - 1]) / 2;\n  }\n  return sortedWeights[middle];\n}\n// export function medianWeight = calculateMedian(weights);\n\nexport function calculatePopularName(trainingNames) {\n  const nameCount = {};\n  for (let i = 0; i < trainingNames.length; i++) {\n    if (nameCount[trainingNames[i]]) {\n      nameCount[trainingNames[i]]++;\n    } else {\n      nameCount[trainingNames[i]] = 1;\n    }\n  }\n  let maxCount = 0;\n  let maxName = \"\";\n  for (const name in nameCount) {\n    if (nameCount[name] > maxCount) {\n      maxCount = nameCount[name];\n      maxName = name;\n    }\n  }\n  return maxName;\n}\nexport function currentTrainingName(trainingNames) {\n  return trainingNames[trainingNames.length - 1];\n}\n\n// export function popularTrainingName = pupolarName(trainingNames);","map":{"version":3,"names":["calculateAverage","weights","sum","i","length","calculateMax","max","calculateMin","min","calculateVariance","average","variance","Math","pow","calculateStandardDeviation","sqrt","calculateMedian","sortedWeights","sort","middle","floor","calculatePopularName","trainingNames","nameCount","maxCount","maxName","name","currentTrainingName"],"sources":["C:/Users/Daniel Maman/git/fitness-web/fitness-web/client/src/controller/utils/util_home_page.js"],"sourcesContent":["export function calculateAverage  (weights)   { \r\n    let sum = 0;\r\n    for(let i = 0; i < weights.length; i++){\r\n        sum += weights[i];\r\n    }\r\n    return sum / weights.length;\r\n}\r\n\r\nexport function calculateMax  (weights)   {\r\n    let max = weights[0];\r\n    for(let i = 1; i < weights.length; i++){\r\n        if(weights[i] > max){\r\n            max = weights[i];\r\n        }\r\n    }\r\n    return max;\r\n}\r\n// export function maxWeight = calculateMax(weights);\r\n\r\nexport function calculateMin  (weights)   {\r\n    let min = weights[0];\r\n    for(let i = 1; i < weights.length; i++){\r\n        if(weights[i] < min){\r\n            min = weights[i];\r\n        }\r\n    }\r\n    return min;\r\n}\r\n// export function minWeight = calculateMin(weights);\r\n\r\nexport function calculateVariance (weights)   {\r\n    let sum = 0;\r\n    for(let i = 0; i < weights.length; i++){\r\n        sum += weights[i];\r\n    }\r\n    const average = sum / weights.length;\r\n    let variance = 0;\r\n    for(let i = 0; i < weights.length; i++){\r\n        variance += Math.pow(weights[i] - average, 2);\r\n    }   \r\n    return variance / weights.length;\r\n}\r\n// export function varianceWeight = calculateVariance(weights);\r\n\r\nexport function calculateStandardDeviation  (weights)   {\r\n    return Math.sqrt(calculateVariance(weights));\r\n}\r\n// export function standardDeviationWeight = calculateStandardDeviation(weights);\r\n\r\nexport function calculateMedian  (weights)   {\r\n    const sortedWeights = weights.sort();\r\n    const middle = Math.floor(sortedWeights.length / 2);\r\n    if(sortedWeights.length % 2 === 0){\r\n        return (sortedWeights[middle] + sortedWeights[middle - 1]) / 2;\r\n    }\r\n    return sortedWeights[middle];\r\n}\r\n// export function medianWeight = calculateMedian(weights);\r\n\r\nexport function calculatePopularName (trainingNames)   {\r\n    const nameCount = {};\r\n    for(let i = 0; i < trainingNames.length; i++){\r\n        if(nameCount[trainingNames[i]]){\r\n            nameCount[trainingNames[i]]++;\r\n        }else{\r\n            nameCount[trainingNames[i]] = 1;\r\n        }\r\n    }\r\n    let maxCount = 0;\r\n    let maxName = \"\";\r\n    for(const name in nameCount){\r\n        if(nameCount[name] > maxCount){\r\n            maxCount = nameCount[name];\r\n            maxName = name;\r\n        }\r\n    }\r\n    return maxName;\r\n}\r\n\r\nexport function currentTrainingName (trainingNames) {\r\n    return trainingNames[trainingNames.length - 1];\r\n}\r\n\r\n// export function popularTrainingName = pupolarName(trainingNames);\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
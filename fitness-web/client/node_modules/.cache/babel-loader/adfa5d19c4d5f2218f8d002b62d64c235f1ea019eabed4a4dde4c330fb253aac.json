{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Daniel Maman\\\\git\\\\fitness-web\\\\fitness-web\\\\client\\\\src\\\\componenets\\\\ChartTrainingGraph.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport { Chart } from 'chart.js';\nimport 'chartjs-plugin-datalabels';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChartTrainingGraph = () => {\n  _s();\n  const chartRef = useRef(null);\n  useEffect(() => {\n    const ctx = chartRef.current.getContext('2d');\n\n    // Destroy any existing Chart instance\n    if (Chart.instances.length > 0) {\n      Chart.instances.forEach(instance => {\n        if (instance.chart.canvas.id === 'ChartTrainingGraph') {\n          instance.destroy();\n        }\n      });\n    }\n\n    // Create a new Chart instance\n    const myChart = new Chart(ctx, {\n      // Chart configuration options...\n    });\n\n    // Update the chart as needed\n    // ...\n\n    // Cleanup on component unmount\n    return () => {\n      myChart.destroy();\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    id: \"ChartTrainingGraph\",\n    ref: chartRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 10\n  }, this);\n};\n_s(ChartTrainingGraph, \"X+1SfQQ6xefXNU27aQW843M7cTw=\");\n_c = ChartTrainingGraph;\nexport default ChartTrainingGraph;\nvar _c;\n$RefreshReg$(_c, \"ChartTrainingGraph\");","map":{"version":3,"names":["React","useEffect","useRef","Chart","jsxDEV","_jsxDEV","ChartTrainingGraph","_s","chartRef","ctx","current","getContext","instances","length","forEach","instance","chart","canvas","id","destroy","myChart","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Daniel Maman/git/fitness-web/fitness-web/client/src/componenets/ChartTrainingGraph.jsx"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\r\nimport { Chart } from 'chart.js';\r\nimport 'chartjs-plugin-datalabels';\r\n\r\nconst ChartTrainingGraph = () => {\r\n  const chartRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    const ctx = chartRef.current.getContext('2d');\r\n\r\n    // Destroy any existing Chart instance\r\n    if (Chart.instances.length > 0) {\r\n      Chart.instances.forEach((instance) => {\r\n        if (instance.chart.canvas.id === 'ChartTrainingGraph') {\r\n          instance.destroy();\r\n        }\r\n      });\r\n    }\r\n\r\n    // Create a new Chart instance\r\n    const myChart = new Chart(ctx, {\r\n      // Chart configuration options...\r\n    });\r\n\r\n    // Update the chart as needed\r\n    // ...\r\n\r\n    // Cleanup on component unmount\r\n    return () => {\r\n      myChart.destroy();\r\n    };\r\n  }, []);\r\n\r\n  return <canvas id=\"ChartTrainingGraph\" ref={chartRef}></canvas>;\r\n};\r\n\r\nexport default ChartTrainingGraph;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAChD,SAASC,KAAK,QAAQ,UAAU;AAChC,OAAO,2BAA2B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnC,MAAMC,kBAAkB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC/B,MAAMC,QAAQ,GAAGN,MAAM,CAAC,IAAI,CAAC;EAE7BD,SAAS,CAAC,MAAM;IACd,MAAMQ,GAAG,GAAGD,QAAQ,CAACE,OAAO,CAACC,UAAU,CAAC,IAAI,CAAC;;IAE7C;IACA,IAAIR,KAAK,CAACS,SAAS,CAACC,MAAM,GAAG,CAAC,EAAE;MAC9BV,KAAK,CAACS,SAAS,CAACE,OAAO,CAAEC,QAAQ,IAAK;QACpC,IAAIA,QAAQ,CAACC,KAAK,CAACC,MAAM,CAACC,EAAE,KAAK,oBAAoB,EAAE;UACrDH,QAAQ,CAACI,OAAO,CAAC,CAAC;QACpB;MACF,CAAC,CAAC;IACJ;;IAEA;IACA,MAAMC,OAAO,GAAG,IAAIjB,KAAK,CAACM,GAAG,EAAE;MAC7B;IAAA,CACD,CAAC;;IAEF;IACA;;IAEA;IACA,OAAO,MAAM;MACXW,OAAO,CAACD,OAAO,CAAC,CAAC;IACnB,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,oBAAOd,OAAA;IAAQa,EAAE,EAAC,oBAAoB;IAACG,GAAG,EAAEb;EAAS;IAAAc,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAS,CAAC;AACjE,CAAC;AAAClB,EAAA,CA9BID,kBAAkB;AAAAoB,EAAA,GAAlBpB,kBAAkB;AAgCxB,eAAeA,kBAAkB;AAAC,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Daniel Maman\\\\git\\\\fitness-web\\\\fitness-web\\\\client\\\\src\\\\componenets\\\\General\\\\GraphComponent.jsx\";\nimport React from 'react';\nimport { Line } from 'react-chartjs-2';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction GraphComponent(_ref) {\n  let {\n    selectedTrainings\n  } = _ref;\n  // Extracting the dates, weights, and training names from selectedTrainings\n  const dates = selectedTrainings.map(training => {\n    const date = new Date(training.startDate);\n    const day = String(date.getDate()).padStart(2, '0');\n    const month = String(date.getMonth() + 1).padStart(2, '0');\n    const year = date.getFullYear();\n    return `${day}/${month}/${year}`;\n  });\n  const weights = selectedTrainings.map(training => training.weight);\n  const trainingNames = selectedTrainings.map(training => training.name);\n  const totalTrainings = selectedTrainings.length;\n\n  // Create the chart data\n  const chartData = {\n    labels: dates,\n    datasets: [{\n      label: 'Weight',\n      data: weights,\n      borderColor: 'cyan',\n      fill: true\n    }]\n  };\n\n  // Customizing the tooltips to display the training name\n  const chartOptions = {\n    plugins: {\n      tooltip: {\n        callbacks: {\n          label: context => {\n            const label = context.dataset.label;\n            if (context.parsed.y !== null) {\n              const trainingName = trainingNames[context.dataIndex]; // Get the corresponding training name\n              return `${label}: ${context.parsed.y} kg -> (${trainingName})`;\n            }\n            return null;\n          }\n        }\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Line, {\n        data: chartData,\n        options: chartOptions\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n}\n_c = GraphComponent;\n;\nexport default GraphComponent;\nvar _c;\n$RefreshReg$(_c, \"GraphComponent\");","map":{"version":3,"names":["React","Line","jsxDEV","_jsxDEV","GraphComponent","_ref","selectedTrainings","dates","map","training","date","Date","startDate","day","String","getDate","padStart","month","getMonth","year","getFullYear","weights","weight","trainingNames","name","totalTrainings","length","chartData","labels","datasets","label","data","borderColor","fill","chartOptions","plugins","tooltip","callbacks","context","dataset","parsed","y","trainingName","dataIndex","children","options","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Daniel Maman/git/fitness-web/fitness-web/client/src/componenets/General/GraphComponent.jsx"],"sourcesContent":["import React from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\n\r\nfunction GraphComponent({ selectedTrainings }) {\r\n  // Extracting the dates, weights, and training names from selectedTrainings\r\n  const dates = selectedTrainings.map((training) => {\r\n    const date = new Date(training.startDate);\r\n    const day = String(date.getDate()).padStart(2, '0');\r\n    const month = String(date.getMonth() + 1).padStart(2, '0');\r\n    const year = date.getFullYear();\r\n    return `${day}/${month}/${year}`;\r\n  });\r\n    const weights = selectedTrainings.map((training) => training.weight);\r\n  const trainingNames  = selectedTrainings.map((training) => training.name);\r\n  const totalTrainings = selectedTrainings.length;\r\n\r\n// Create the chart data\r\nconst chartData = {\r\n  labels: dates,\r\n  datasets: [\r\n    {\r\n      label: 'Weight',\r\n      data: weights,\r\n      borderColor: 'cyan',\r\n      fill: true,\r\n    },\r\n  ],\r\n};\r\n\r\n// Customizing the tooltips to display the training name\r\nconst chartOptions = {\r\n  plugins: {\r\n    tooltip: {\r\n      callbacks: {\r\n        label: (context) => {\r\n          const label = context.dataset.label;\r\n          if (context.parsed.y !== null) {\r\n\r\n            const trainingName = trainingNames[context.dataIndex] ; // Get the corresponding training name\r\n            return `${label}: ${context.parsed.y} kg -> (${trainingName})`;\r\n          }\r\n          return null;\r\n        },\r\n      },\r\n    },\r\n  },\r\n};\r\n  return (\r\n    <div>\r\n    <div>\r\n      <Line data={chartData} options={chartOptions} />\r\n    </div>\r\n\r\n    </div>\r\n    \r\n  );\r\n};\r\n\r\nexport default GraphComponent;"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,IAAI,QAAQ,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvC,SAASC,cAAcA,CAAAC,IAAA,EAAwB;EAAA,IAAvB;IAAEC;EAAkB,CAAC,GAAAD,IAAA;EAC3C;EACA,MAAME,KAAK,GAAGD,iBAAiB,CAACE,GAAG,CAAEC,QAAQ,IAAK;IAChD,MAAMC,IAAI,GAAG,IAAIC,IAAI,CAACF,QAAQ,CAACG,SAAS,CAAC;IACzC,MAAMC,GAAG,GAAGC,MAAM,CAACJ,IAAI,CAACK,OAAO,CAAC,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;IACnD,MAAMC,KAAK,GAAGH,MAAM,CAACJ,IAAI,CAACQ,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC,CAACF,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;IAC1D,MAAMG,IAAI,GAAGT,IAAI,CAACU,WAAW,CAAC,CAAC;IAC/B,OAAQ,GAAEP,GAAI,IAAGI,KAAM,IAAGE,IAAK,EAAC;EAClC,CAAC,CAAC;EACA,MAAME,OAAO,GAAGf,iBAAiB,CAACE,GAAG,CAAEC,QAAQ,IAAKA,QAAQ,CAACa,MAAM,CAAC;EACtE,MAAMC,aAAa,GAAIjB,iBAAiB,CAACE,GAAG,CAAEC,QAAQ,IAAKA,QAAQ,CAACe,IAAI,CAAC;EACzE,MAAMC,cAAc,GAAGnB,iBAAiB,CAACoB,MAAM;;EAEjD;EACA,MAAMC,SAAS,GAAG;IAChBC,MAAM,EAAErB,KAAK;IACbsB,QAAQ,EAAE,CACR;MACEC,KAAK,EAAE,QAAQ;MACfC,IAAI,EAAEV,OAAO;MACbW,WAAW,EAAE,MAAM;MACnBC,IAAI,EAAE;IACR,CAAC;EAEL,CAAC;;EAED;EACA,MAAMC,YAAY,GAAG;IACnBC,OAAO,EAAE;MACPC,OAAO,EAAE;QACPC,SAAS,EAAE;UACTP,KAAK,EAAGQ,OAAO,IAAK;YAClB,MAAMR,KAAK,GAAGQ,OAAO,CAACC,OAAO,CAACT,KAAK;YACnC,IAAIQ,OAAO,CAACE,MAAM,CAACC,CAAC,KAAK,IAAI,EAAE;cAE7B,MAAMC,YAAY,GAAGnB,aAAa,CAACe,OAAO,CAACK,SAAS,CAAC,CAAE,CAAC;cACxD,OAAQ,GAAEb,KAAM,KAAIQ,OAAO,CAACE,MAAM,CAACC,CAAE,WAAUC,YAAa,GAAE;YAChE;YACA,OAAO,IAAI;UACb;QACF;MACF;IACF;EACF,CAAC;EACC,oBACEvC,OAAA;IAAAyC,QAAA,eACAzC,OAAA;MAAAyC,QAAA,eACEzC,OAAA,CAACF,IAAI;QAAC8B,IAAI,EAAEJ,SAAU;QAACkB,OAAO,EAAEX;MAAa;QAAAY,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC7C;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAED,CAAC;AAGV;AAACC,EAAA,GArDQ9C,cAAc;AAqDtB;AAED,eAAeA,cAAc;AAAC,IAAA8C,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
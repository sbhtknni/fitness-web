{"ast":null,"code":"export function calculateAverage(weights) {\n  let sum = 0;\n  for (let i = 0; i < weights.length; i++) {\n    sum += weights[i];\n  }\n  return sum / weights.length;\n}\nexport function calculateMax(weights) {\n  let max = weights[0];\n  for (let i = 1; i < weights.length; i++) {\n    if (weights[i] > max) {\n      max = weights[i];\n    }\n  }\n  if (max != null) return max.toFixed(2);else {\n    return \"You need to work one more time to see the data\";\n  }\n}\n// export function maxWeight = calculateMax(weights);\n\nexport function calculateMin(weights) {\n  let min = weights[0];\n  for (let i = 1; i < weights.length; i++) {\n    if (weights[i] < min) {\n      min = weights[i];\n    }\n  }\n  if (min != null) {\n    return min.toFixed(2);\n  }\n  return \"You need to work one more time to see the data\";\n}\n// export function minWeight = calculateMin(weights);\n\nexport function calculateVariance(weights) {\n  let sum = 0;\n  for (let i = 0; i < weights.length; i++) {\n    sum += weights[i];\n  }\n  const average = sum / weights.length;\n  let variance = 0;\n  for (let i = 0; i < weights.length; i++) {\n    variance += Math.pow(weights[i] - average, 2);\n  }\n  if (variance / weights.length == NaN) {}\n  if (variance / weights.length != null) {\n    return (variance / weights.length).toFixed(2);\n    ;\n  }\n}\n// export function varianceWeight = calculateVariance(weights);\n\nexport function calculateStandardDeviation(weights) {\n  return Math.sqrt(calculateVariance(weights)).toFixed(2);\n}\n// export function standardDeviationWeight = calculateStandardDeviation(weights);\n\nexport function calculateMedian(weights) {\n  const sortedWeights = weights.sort();\n  const middle = Math.floor(sortedWeights.length / 2);\n  if (sortedWeights.length % 2 === 0) {\n    return (sortedWeights[middle] + sortedWeights[middle - 1]) / 2;\n  }\n  return sortedWeights[middle];\n}\n// export function medianWeight = calculateMedian(weights);\n\nexport function calculatePopularName(trainingNames) {\n  const nameCount = {};\n  for (let i = 0; i < trainingNames.length; i++) {\n    if (nameCount[trainingNames[i]]) {\n      nameCount[trainingNames[i]]++;\n    } else {\n      nameCount[trainingNames[i]] = 1;\n    }\n  }\n  let maxCount = 0;\n  let maxName = \"\";\n  for (const name in nameCount) {\n    if (nameCount[name] > maxCount) {\n      maxCount = nameCount[name];\n      maxName = name;\n    }\n  }\n  return maxName;\n}\nexport function currentTrainingName(trainingNames) {\n  return trainingNames[trainingNames.length - 1];\n}\n\n// export function calculateWeightLoss = calculateWeightLoss(dates, weights, trainingNames)\n\n//calculate total weight loss from the first training to the last training\nexport function calculateWeightLoss(selectedTrainings) {\n  const firstTraining = selectedTrainings[0];\n  const lastTraining = selectedTrainings[selectedTrainings.length - 1];\n  if (firstTraining == null || lastTraining == null) {\n    return 0;\n  }\n  if (lastTraining.weight - firstTraining.weight > 0) {\n    return ` You gained ${lastTraining.weight - firstTraining.weight} kg from the first training to the last training.`;\n  }\n  return ` Well done! You lost ${firstTraining.weight - lastTraining.weight} kg from the first training to the last training.`;\n}\n\n//---------------------------------------------------------------------------------\n\n//Calaculate for each program the weight loss\nexport function calculateWeightLossPerProgram(selectedTrainings) {\n  const weightLossPerProgram = {};\n  for (let i = 0; i < selectedTrainings.length - 1; i++) {\n    const currentTraining = selectedTrainings[i];\n    const nextTraining = selectedTrainings[i + 1];\n    const weightLoss = nextTraining.weight - currentTraining.weight;\n    if (weightLossPerProgram[currentTraining.name]) {\n      weightLossPerProgram[currentTraining.name] += weightLoss;\n    } else {\n      weightLossPerProgram[currentTraining.name] = weightLoss;\n    }\n  }\n  let Result = \"\";\n\n  // Create String Result\n  for (const program in weightLossPerProgram) {\n    if (weightLossPerProgram[program] < 0) {\n      Result += `$You  lost ${-1 * weightLossPerProgram[program]} kg in ${program}.$`;\n    } else {\n      Result += `$You gained ${Math.abs(weightLossPerProgram[program])} kg in ${program}.$`;\n    }\n  }\n  let Best = findMaxWeightLoss(weightLossPerProgram);\n  Result += `#The program with the most weight loss is ${Best}.`;\n  return Result;\n}\n\n// Find the program with the most weight loss \nfunction findMaxWeightLoss(weightLossPerProgram) {\n  let maxWeightLoss = 0;\n  let maxProgram = \"\";\n  for (const program in weightLossPerProgram) {\n    if (weightLossPerProgram[program] < maxWeightLoss) {\n      maxWeightLoss = weightLossPerProgram[program];\n      maxProgram = program;\n    }\n  }\n  return maxProgram;\n}\n\n//Calculate the days between two dates\n\n// export function calculateDays(lastDate, firstDate) {\n//     const oneDay = 24 * 60 * 60 * 1000;\n//     const firstDateObj = new Date(firstDate);\n//     const lastDateObj = new Date(lastDate);\n//     return Math.round(Math.abs((firstDateObj - lastDateObj) / oneDay));\n// }\n\nfunction calculateDaysBetweenDates(date1, date2) {\n  const dateObject1 = new Date(date1);\n  const dateObject2 = new Date(date2);\n  const timeDifferenceMs = Math.abs(dateObject2 - dateObject1);\n  const daysDifference = Math.ceil(timeDifferenceMs / (1000 * 60 * 60 * 24));\n  return daysDifference;\n}\n\n//For each program calculate the average weight loss per day\nexport function calculateAverageWeightLossPerDay(selectedTrainings) {\n  const weightLossPerProgram = {};\n  const daysInProgram = {};\n  for (let i = 0; i < selectedTrainings.length - 1; i++) {\n    const currentTraining = selectedTrainings[i];\n    const nextTraining = selectedTrainings[i + 1];\n    const weightLoss = nextTraining.weight - currentTraining.weight;\n    if (weightLossPerProgram[currentTraining.name]) {\n      weightLossPerProgram[currentTraining.name] += weightLoss;\n      daysInProgram[currentTraining.name] += calculateDaysBetweenDates(currentTraining.date, nextTraining.date);\n    } else {\n      weightLossPerProgram[currentTraining.name] = weightLoss;\n      daysInProgram[currentTraining.name] = calculateDaysBetweenDates(currentTraining.date, nextTraining.date);\n    }\n  }\n  const averageWeightLossPerDay = {};\n  for (const program in weightLossPerProgram) {\n    averageWeightLossPerDay[program] = (weightLossPerProgram[program] / daysInProgram[program]).toFixed(2);\n  }\n  findMaxAverageWeightLossPerDay(averageWeightLossPerDay);\n}\n\n//find the program with the most average weight loss per day\nexport function findMaxAverageWeightLossPerDay(averageWeightLossPerDay) {\n  let maxAverageWeightLossPerDay = 0;\n  let maxProgram = \"\";\n  for (const program in averageWeightLossPerDay) {\n    if (averageWeightLossPerDay[program] < maxAverageWeightLossPerDay) {\n      maxAverageWeightLossPerDay = averageWeightLossPerDay[program];\n      maxProgram = program;\n    }\n  }\n  return maxProgram;\n}\n\n//How much days in each program\nexport function calculateDaysInProgram(selectedTrainings) {\n  console.log(selectedTrainings);\n  debugger;\n  const daysInProgram = {};\n  for (let i = 0; i < selectedTrainings.length - 2; i++) {\n    const currentTraining = selectedTrainings[i];\n    const nextTraining = selectedTrainings[i + 1];\n    if (daysInProgram[currentTraining.name]) {\n      daysInProgram[currentTraining.name] += calculateDaysBetweenDates(currentTraining.date, nextTraining.date);\n    } else {\n      daysInProgram[currentTraining.name] = calculateDaysBetweenDates(currentTraining.date, nextTraining.date);\n    }\n  }\n  const Result = \"\";\n  for (const program in daysInProgram) {\n    Result += `$You were in ${program} for ${daysInProgram[program]} days.$`;\n  }\n  return Result;\n}","map":{"version":3,"names":["calculateAverage","weights","sum","i","length","calculateMax","max","toFixed","calculateMin","min","calculateVariance","average","variance","Math","pow","NaN","calculateStandardDeviation","sqrt","calculateMedian","sortedWeights","sort","middle","floor","calculatePopularName","trainingNames","nameCount","maxCount","maxName","name","currentTrainingName","calculateWeightLoss","selectedTrainings","firstTraining","lastTraining","weight","calculateWeightLossPerProgram","weightLossPerProgram","currentTraining","nextTraining","weightLoss","Result","program","abs","Best","findMaxWeightLoss","maxWeightLoss","maxProgram","calculateDaysBetweenDates","date1","date2","dateObject1","Date","dateObject2","timeDifferenceMs","daysDifference","ceil","calculateAverageWeightLossPerDay","daysInProgram","date","averageWeightLossPerDay","findMaxAverageWeightLossPerDay","maxAverageWeightLossPerDay","calculateDaysInProgram","console","log"],"sources":["C:/Users/Daniel Maman/git/fitness-web/fitness-web/client/src/controller/utils/util_home_page.js"],"sourcesContent":["export function calculateAverage(weights) {\r\n    let sum = 0;\r\n    for (let i = 0; i < weights.length; i++) {\r\n        sum += weights[i];\r\n    }\r\n    return sum / weights.length;\r\n}\r\n\r\nexport function calculateMax(weights) {\r\n    let max = weights[0];\r\n    for (let i = 1; i < weights.length; i++) {\r\n        if (weights[i] > max) {\r\n            max = weights[i];\r\n        }\r\n    }\r\n    if (max != null)\r\n        return max.toFixed(2);\r\n    else {\r\n        return \"You need to work one more time to see the data\"\r\n    }\r\n}\r\n// export function maxWeight = calculateMax(weights);\r\n\r\nexport function calculateMin(weights) {\r\n    let min = weights[0];\r\n    for (let i = 1; i < weights.length; i++) {\r\n        if (weights[i] < min) {\r\n            min = weights[i];\r\n        }\r\n    }\r\n    if (min != null){\r\n        return min.toFixed(2);\r\n    }\r\n    return \"You need to work one more time to see the data\"\r\n}\r\n// export function minWeight = calculateMin(weights);\r\n\r\nexport function calculateVariance(weights) {\r\n    let sum = 0;\r\n    for (let i = 0; i < weights.length; i++) {\r\n        sum += weights[i];\r\n    }\r\n    const average = sum / weights.length;\r\n    let variance = 0;\r\n    for (let i = 0; i < weights.length; i++) {\r\n        variance += Math.pow(weights[i] - average, 2);\r\n    }\r\n    if (variance / weights.length == NaN) {\r\n\r\n     }\r\n\r\n    if (variance / weights.length != null) {\r\n        return (variance / weights.length).toFixed(2);;\r\n    }\r\n}\r\n// export function varianceWeight = calculateVariance(weights);\r\n\r\nexport function calculateStandardDeviation(weights) {\r\n    return (Math.sqrt(calculateVariance(weights)).toFixed(2));\r\n}\r\n// export function standardDeviationWeight = calculateStandardDeviation(weights);\r\n\r\nexport function calculateMedian(weights) {\r\n    const sortedWeights = weights.sort();\r\n    const middle = Math.floor(sortedWeights.length / 2);\r\n    if (sortedWeights.length % 2 === 0) {\r\n        return (sortedWeights[middle] + sortedWeights[middle - 1]) / 2;\r\n    }\r\n    return sortedWeights[middle];\r\n}\r\n// export function medianWeight = calculateMedian(weights);\r\n\r\nexport function calculatePopularName(trainingNames) {\r\n    const nameCount = {};\r\n    for (let i = 0; i < trainingNames.length; i++) {\r\n        if (nameCount[trainingNames[i]]) {\r\n            nameCount[trainingNames[i]]++;\r\n        } else {\r\n            nameCount[trainingNames[i]] = 1;\r\n        }\r\n    }\r\n    let maxCount = 0;\r\n    let maxName = \"\";\r\n    for (const name in nameCount) {\r\n        if (nameCount[name] > maxCount) {\r\n            maxCount = nameCount[name];\r\n            maxName = name;\r\n        }\r\n    }\r\n    return maxName;\r\n}\r\n\r\nexport function currentTrainingName(trainingNames) {\r\n    return trainingNames[trainingNames.length - 1];\r\n}\r\n\r\n// export function calculateWeightLoss = calculateWeightLoss(dates, weights, trainingNames)\r\n\r\n\r\n//calculate total weight loss from the first training to the last training\r\nexport function calculateWeightLoss(selectedTrainings) {\r\n\r\n    const firstTraining = selectedTrainings[0]\r\n    const lastTraining = selectedTrainings[selectedTrainings.length - 1];\r\n    if (firstTraining == null || lastTraining == null) {\r\n        return 0;\r\n    }\r\n    if (lastTraining.weight - firstTraining.weight > 0) {\r\n        return ` You gained ${lastTraining.weight - firstTraining.weight} kg from the first training to the last training.`\r\n    }\r\n    return ` Well done! You lost ${firstTraining.weight - lastTraining.weight} kg from the first training to the last training.`\r\n\r\n\r\n}\r\n\r\n\r\n//---------------------------------------------------------------------------------\r\n\r\n\r\n//Calaculate for each program the weight loss\r\nexport function calculateWeightLossPerProgram(selectedTrainings) {\r\n    const weightLossPerProgram = {};\r\n    for (let i = 0; i < selectedTrainings.length - 1; i++) {\r\n        const currentTraining = selectedTrainings[i];\r\n        const nextTraining = selectedTrainings[i + 1];\r\n        const weightLoss = nextTraining.weight - currentTraining.weight;\r\n        if (weightLossPerProgram[currentTraining.name]) {\r\n            weightLossPerProgram[currentTraining.name] += weightLoss;\r\n        } else {\r\n            weightLossPerProgram[currentTraining.name] = weightLoss;\r\n        }\r\n    }\r\n    let Result = \"\";\r\n\r\n    // Create String Result\r\n    for (const program in weightLossPerProgram) {\r\n\r\n        if (weightLossPerProgram[program] < 0) {\r\n            Result += `$You  lost ${-1 * weightLossPerProgram[program]} kg in ${program}.$`;\r\n        } else {\r\n            Result += `$You gained ${Math.abs(weightLossPerProgram[program])} kg in ${program}.$`;\r\n        }\r\n    }\r\n    let Best = findMaxWeightLoss(weightLossPerProgram);\r\n    Result += `#The program with the most weight loss is ${Best}.`;\r\n    return Result;\r\n\r\n}\r\n\r\n// Find the program with the most weight loss \r\nfunction findMaxWeightLoss(weightLossPerProgram) {\r\n    let maxWeightLoss = 0;\r\n    let maxProgram = \"\";\r\n    for (const program in weightLossPerProgram) {\r\n        if (weightLossPerProgram[program] < maxWeightLoss) {\r\n            maxWeightLoss = weightLossPerProgram[program];\r\n            maxProgram = program;\r\n        }\r\n    }\r\n    return maxProgram;\r\n}\r\n\r\n\r\n//Calculate the days between two dates\r\n\r\n// export function calculateDays(lastDate, firstDate) {\r\n//     const oneDay = 24 * 60 * 60 * 1000;\r\n//     const firstDateObj = new Date(firstDate);\r\n//     const lastDateObj = new Date(lastDate);\r\n//     return Math.round(Math.abs((firstDateObj - lastDateObj) / oneDay));\r\n// }\r\n\r\n\r\nfunction calculateDaysBetweenDates(date1, date2) {\r\n    const dateObject1 = new Date(date1);\r\n    const dateObject2 = new Date(date2);\r\n\r\n    const timeDifferenceMs = Math.abs(dateObject2 - dateObject1);\r\n    const daysDifference = Math.ceil(timeDifferenceMs / (1000 * 60 * 60 * 24));\r\n\r\n    return daysDifference;\r\n}\r\n\r\n//For each program calculate the average weight loss per day\r\nexport function calculateAverageWeightLossPerDay(selectedTrainings) {\r\n    const weightLossPerProgram = {};\r\n    const daysInProgram = {};\r\n    for (let i = 0; i < selectedTrainings.length - 1; i++) {\r\n        const currentTraining = selectedTrainings[i];\r\n        const nextTraining = selectedTrainings[i + 1];\r\n        const weightLoss = nextTraining.weight - currentTraining.weight;\r\n        if (weightLossPerProgram[currentTraining.name]) {\r\n            weightLossPerProgram[currentTraining.name] += weightLoss;\r\n            daysInProgram[currentTraining.name] += calculateDaysBetweenDates(currentTraining.date, nextTraining.date);\r\n        } else {\r\n            weightLossPerProgram[currentTraining.name] = weightLoss;\r\n            daysInProgram[currentTraining.name] = calculateDaysBetweenDates(currentTraining.date, nextTraining.date);\r\n        }\r\n    }\r\n    const averageWeightLossPerDay = {};\r\n    for (const program in weightLossPerProgram) {\r\n        averageWeightLossPerDay[program] = (weightLossPerProgram[program] / daysInProgram[program]).toFixed(2);\r\n    }\r\n    findMaxAverageWeightLossPerDay(averageWeightLossPerDay);\r\n\r\n}\r\n\r\n//find the program with the most average weight loss per day\r\nexport function findMaxAverageWeightLossPerDay(averageWeightLossPerDay) {\r\n    let maxAverageWeightLossPerDay = 0;\r\n    let maxProgram = \"\";\r\n    for (const program in averageWeightLossPerDay) {\r\n        if (averageWeightLossPerDay[program] < maxAverageWeightLossPerDay) {\r\n            maxAverageWeightLossPerDay = averageWeightLossPerDay[program];\r\n            maxProgram = program;\r\n        }\r\n    }\r\n    return maxProgram;\r\n}\r\n\r\n//How much days in each program\r\nexport function calculateDaysInProgram(selectedTrainings) {\r\n    console.log(selectedTrainings);\r\n    debugger;\r\n    const daysInProgram = {};\r\n    for (let i = 0; i < selectedTrainings.length - 2; i++) {\r\n        const currentTraining = selectedTrainings[i];\r\n        const nextTraining = selectedTrainings[i + 1];\r\n        if (daysInProgram[currentTraining.name]) {\r\n            daysInProgram[currentTraining.name] += calculateDaysBetweenDates(currentTraining.date, nextTraining.date);\r\n        } else {\r\n            daysInProgram[currentTraining.name] = calculateDaysBetweenDates(currentTraining.date, nextTraining.date);\r\n        }\r\n    }\r\n\r\n    const Result = \"\";\r\n    for (const program in daysInProgram) {\r\n        Result += `$You were in ${program} for ${daysInProgram[program]} days.$`;\r\n    }\r\n\r\n    return Result;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Daniel Maman\\\\git\\\\fitness-web\\\\fitness-web\\\\client\\\\src\\\\componenets\\\\ChartTrainingGraph.jsx\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { Chart } from 'chart.js';\nimport 'chartjs-plugin-datalabels';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChartTrainingGraph = _ref => {\n  _s();\n  let {\n    selectedTrainings\n  } = _ref;\n  const chartRef = React.useRef(null);\n  const trainingNames = [...new Set(selectedTrainings.map(training => training.name))];\n  const totalCount = selectedTrainings.length;\n  React.useEffect(() => {\n    const ctxP = chartRef.current.getContext('2d');\n    let myPieChart = null;\n    const createChart = () => {\n      const colors = generateColors(trainingNames.length);\n      myPieChart = new Chart(ctxP, {\n        type: 'pie',\n        data: {\n          labels: trainingNames.map(name => `${name} (${getPercentage(name)}%)`),\n          datasets: [{\n            data: calculateOccurrences(trainingNames, selectedTrainings),\n            backgroundColor: colors,\n            hoverBackgroundColor: colors\n          }]\n        },\n        options: {\n          responsive: true,\n          legend: {\n            position: 'right',\n            labels: {\n              padding: 10,\n              // Reduce the padding\n              boxWidth: 8,\n              // Reduce the box width\n              fontSize: 12 // Reduce the font size\n            }\n          },\n\n          plugins: {\n            datalabels: {\n              display: false // Hide the data labels\n            }\n          }\n        }\n      });\n    };\n\n    const destroyChart = () => {\n      if (myPieChart) {\n        myPieChart.destroy();\n        myPieChart = null;\n      }\n    };\n    destroyChart(); // Destroy any existing chart instance\n    createChart(); // Create the new chart\n\n    return () => {\n      destroyChart(); // Clean up the chart on unmount\n    };\n  }, [selectedTrainings]); // Include selectedTrainings in the dependency array to update the chart when it changes\n\n  const calculateOccurrences = (trainingNames, selectedTrainings) => {\n    const occurrences = trainingNames.map(name => selectedTrainings.filter(training => training.name === name).length);\n    return occurrences;\n  };\n  const generateColors = count => {\n    const colors = [];\n    for (let i = 0; i < count; i++) {\n      const hue = i * 360 / count;\n      const color = `hsl(${hue}, 50%, 60%)`;\n      colors.push(color);\n    }\n    return colors;\n  };\n  const getPercentage = name => {\n    const count = selectedTrainings.filter(training => training.name === name).length;\n    const percentage = (count / totalCount * 100).toFixed(2);\n    return percentage;\n  };\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    id: \"labelChart\",\n    ref: chartRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 10\n  }, this);\n};\n_s(ChartTrainingGraph, \"X+1SfQQ6xefXNU27aQW843M7cTw=\");\n_c = ChartTrainingGraph;\nexport default ChartTrainingGraph;\nvar _c;\n$RefreshReg$(_c, \"ChartTrainingGraph\");","map":{"version":3,"names":["React","Chart","jsxDEV","_jsxDEV","ChartTrainingGraph","_ref","_s","selectedTrainings","chartRef","useRef","trainingNames","Set","map","training","name","totalCount","length","useEffect","ctxP","current","getContext","myPieChart","createChart","colors","generateColors","type","data","labels","getPercentage","datasets","calculateOccurrences","backgroundColor","hoverBackgroundColor","options","responsive","legend","position","padding","boxWidth","fontSize","plugins","datalabels","display","destroyChart","destroy","occurrences","filter","count","i","hue","color","push","percentage","toFixed","id","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Daniel Maman/git/fitness-web/fitness-web/client/src/componenets/ChartTrainingGraph.jsx"],"sourcesContent":["import React from 'react';\r\nimport { Chart } from 'chart.js';\r\nimport 'chartjs-plugin-datalabels';\r\n\r\nconst ChartTrainingGraph = ({ selectedTrainings }) => {\r\n  const chartRef = React.useRef(null);\r\n  const trainingNames = [...new Set(selectedTrainings.map((training) => training.name))];\r\n  const totalCount = selectedTrainings.length;\r\n\r\n  React.useEffect(() => {\r\n    const ctxP = chartRef.current.getContext('2d');\r\n    let myPieChart = null;\r\n\r\n    const createChart = () => {\r\n      const colors = generateColors(trainingNames.length);\r\n\r\n      myPieChart = new Chart(ctxP, {\r\n        type: 'pie',\r\n        data: {\r\n          labels: trainingNames.map((name) => `${name} (${getPercentage(name)}%)`),\r\n          datasets: [\r\n            {\r\n              data: calculateOccurrences(trainingNames, selectedTrainings),\r\n              backgroundColor: colors,\r\n              hoverBackgroundColor: colors,\r\n            },\r\n          ],\r\n        },\r\n        options: {\r\n          responsive: true,\r\n          legend: {\r\n            position: 'right',\r\n            labels: {\r\n              padding: 10, // Reduce the padding\r\n              boxWidth: 8, // Reduce the box width\r\n              fontSize: 12, // Reduce the font size\r\n            },\r\n          },\r\n          plugins: {\r\n            datalabels: {\r\n              display: false, // Hide the data labels\r\n            },\r\n          },\r\n        },\r\n      });\r\n    };\r\n\r\n    const destroyChart = () => {\r\n      if (myPieChart) {\r\n        myPieChart.destroy();\r\n        myPieChart = null;\r\n      }\r\n    };\r\n\r\n    destroyChart(); // Destroy any existing chart instance\r\n    createChart(); // Create the new chart\r\n\r\n    return () => {\r\n      destroyChart(); // Clean up the chart on unmount\r\n    };\r\n  }, [selectedTrainings]); // Include selectedTrainings in the dependency array to update the chart when it changes\r\n\r\n  const calculateOccurrences = (trainingNames, selectedTrainings) => {\r\n    const occurrences = trainingNames.map((name) =>\r\n      selectedTrainings.filter((training) => training.name === name).length\r\n    );\r\n    return occurrences;\r\n  };\r\n\r\n  const generateColors = (count) => {\r\n    const colors = [];\r\n    for (let i = 0; i < count; i++) {\r\n      const hue = (i * 360) / count;\r\n      const color = `hsl(${hue}, 50%, 60%)`;\r\n      colors.push(color);\r\n    }\r\n    return colors;\r\n  };\r\n\r\n  const getPercentage = (name) => {\r\n    const count = selectedTrainings.filter((training) => training.name === name).length;\r\n    const percentage = ((count / totalCount) * 100).toFixed(2);\r\n    return percentage;\r\n  };\r\n\r\n  return <canvas id=\"labelChart\" ref={chartRef}></canvas>;\r\n};\r\n\r\nexport default ChartTrainingGraph;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}